version: "3.8"

services:

  weather_api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: weather_api
    command: ["./entrypoint.sh"]
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  weather_collector:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: weather_collector
    command: celery -A weather_analyzer worker --loglevel=info --queues=collector_queue
    env_file:
      - .env
    depends_on:
      - redis
      - weather_api
    networks:
      - app-network

  weather_processor:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: weather_processor
    command: celery -A weather_analyzer worker --loglevel=info --queues=processor_queue
    env_file:
      - .env
    depends_on:
      - redis
      - weather_api
    networks:
      - app-network

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery-beat
    command: celery -A weather_analyzer beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file:
      - .env
    depends_on:
      - redis
      - weather_api
    networks:
      - app-network

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network
    restart: always


  postgres:
    image: postgres:14
    container_name: postgres-db
    env_file:
      - .env
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
