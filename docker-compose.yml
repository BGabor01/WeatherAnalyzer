services:
  weather_api:
      container_name: weather_api
      build:
        context: .
        dockerfile: Dockerfile
      command: ["./entrypoint.sh"]
      environment:
        - SECRET_KEY=${SECRET_KEY}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_USER=${POSTGRES_USER}
        - RABBITMQ_USER=${RABBITMQ_USER}
        - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      ports:
        - "8000:8000"
      depends_on:
        postgres-primary:
          condition: service_healthy
        pgbouncer:
          condition: service_started
      restart: always
      networks:
      - app-network


  weather_collector:
    container_name: weather_collector
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A weather_analyzer worker --loglevel=info --queues=collector_queue --concurrency=4
    environment:
        - SECRET_KEY=${SECRET_KEY}
        - API_KEY=${API_KEY}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_USER=${POSTGRES_USER}
        - RABBITMQ_USER=${RABBITMQ_USER}
        - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
      weather_api:
        condition: service_started
    restart: always
    networks:
      - app-network


  weather_processor:
    container_name: weather_processor
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A weather_analyzer worker --loglevel=info --queues=processor_queue --concurrency=4
    environment:
        - SECRET_KEY=${SECRET_KEY}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_USER=${POSTGRES_USER}
        - RABBITMQ_USER=${RABBITMQ_USER}
        - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
      weather_api:
        condition: service_started
    restart: always
    networks:
      - app-network

  celery-beat:
    container_name: celery-beat
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A weather_analyzer beat --loglevel=info
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_started
      weather_api:
        condition: service_started
    restart: always
    networks:
      - app-network

  redis:
    container_name: redis
    image: redis:7
    ports:
      - "6379:6379"
    restart: always
    networks:
      - app-network
    
      
  postgres-primary:
    container_name: postgres-primary
    image: bitnami/postgresql:15
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRESQL_REPLICATION_MODE=${POSTGRESQL_PRIMARY_REPLICATION_MODE}
      - POSTGRESQL_REPLICATION_USER=${POSTGRESQL_REPLICATION_USER}
      - POSTGRESQL_REPLICATION_PASSWORD=${POSTGRESQL_REPLICATION_PASSWORD}
      - POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE}
      - POSTGRESQL_EXTRA_FLAGS=${POSTGRESQL_EXTRA_FLAGS}
    healthcheck:
      test: pg_isready -U postgres -d weather
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - app-network

  postgres-replica:
    image: bitnami/postgresql:15
    depends_on:
      postgres-primary:
        condition: service_healthy
    healthcheck:
      test: pg_isready -U postgres
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRESQL_REPLICATION_MODE=${POSTGRESQL_REPLICA_REPLICATION_MODE} 
      - POSTGRESQL_REPLICATION_USER=${POSTGRESQL_REPLICATION_USER}
      - POSTGRESQL_REPLICATION_PASSWORD=${POSTGRESQL_REPLICATION_PASSWORD}
      - POSTGRESQL_MASTER_HOST=${POSTGRESQL_MASTER_HOST}
      - POSTGRESQL_MASTER_PORT_NUMBER=${POSTGRESQL_MASTER_PORT_NUMBER}
    restart: always
    volumes:
    - postgres-data:/bitnami/postgresql
    networks:
      - app-network

  
  pgbouncer:
    container_name: pgbouncer
    image: docker.io/bitnami/pgbouncer:1
    ports:
      - "5432:6432"
    environment:
      - POSTGRESQL_HOST=postgres-primary
      - POSTGRESQL_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE}
      - PGBOUNCER_DATABASE=${PGBOUNCER_DATABASE}
      - PGBOUNCER_AUTH_TYPE=${PGBOUNCER_AUTH_TYPE}
      - PGBOUNCER_POOL_MODE=${PGBOUNCER_POOL_MODE}
      - PGBOUNCER_MAX_CLIENT_CONN=${PGBOUNCER_MAX_CLIENT_CONN}
      - PGBOUNCER_DSN_0=${PGBOUNCER_DSN_0}
    depends_on:
      postgres-primary:
        condition: service_healthy
    restart: always
    networks:
      - app-network


  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    ports:
        - 5672:5672
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      retries: 3
      timeout: 5s
    restart: always
    networks:
      - app-network

volumes:
  postgres-data:
    driver: local
    
networks:
  app-network:
    driver: bridge